name: 'setup-sandpaper'
description: 'Action to setup The Carpentries Lesson Infrastructure'
author: 'Zhian N. Kamvar'
inputs:
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache'
    required: true
    default: 1
  sandpaper-version: 
    description: 'The version of sandpaper to use. You can use the remotes syntax to specify a version to use. Defaults to latest on the r-universe.'
    default: 'latest'
  varnish-version: 
    description: 'The version of varnish to use. You can use the remotes syntax to specify a version to use. Defaults to latest on the r-universe.'
    default: 'latest'
runs:
  using: "composite"
  steps:
      - name: Install pak and query dependencies
        run: |
          cat("::group::Install remotes\n")
          options(
            pak.no_extra_messages = TRUE,
            repos = c(
              carpentries = "https://carpentries.r-universe.dev/",
              archive     = "https://carpentries.github.io/drat/",
              CRAN        = "https://cran.rstudio.com"
            )
          )
          install.packages('remotes')
          deps <- remotes::package_deps("sandpaper", dependencies = TRUE)
          saveRDS(deps, ".github/r-depends.rds")
        shell: Rscript {0}

      - name: Get R and OS version
        id: get-version
        run: |
          cat("::set-output name=os-version::", sessionInfo()$running, "\n", sep = "")
          cat("::set-output name=r-version::", R.Version()$version.string, "\n", sep = "")
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Install apt dependencies for Ubuntu
        id: run-apt
        shell: bash
        run: |
          sudo apt update
          curl https://carpentries.r-universe.dev/stats/sysdeps 2> /dev/null \
          | jq -r '.headers[0] | select(. != null)' 2> /dev/null \
          > ${{ runner.temp }}/sysdeps.txt
          if [[ `wc -l < ${{ runner.temp }}/sysdeps.txt` -gt 0 ]]; then
            echo 'sysdeps acquired'
          else
            echo 'fetching sysdeps from descriptions'
            curl https://carpentries.r-universe.dev/stats/descriptions \
            | jq -r '._builder.sysdeps | .[].headers | select(. != null)' 2> /dev/null \
            > ${{ runner.temp }}/sysdeps.txt
          fi
          if [[ `wc -l < ${{ runner.temp }}/sysdeps.txt` -eq 0 ]]; then
            echo "::warn::System dependencies could not be acquired. Builds may fail"
            exit 1
          else
            echo "found sysdeps: $(cat ${{ runner.temp }}/sysdeps.txt)"
          fi
          printf "libxslt-dev\n" >> ${{ runner.temp }}/sysdeps.txt
          sudo xargs apt-get install --fix-missing -y < ${{ runner.temp }}/sysdeps.txt || echo "Not on Ubuntu"

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.R_LIBS_USER }}/*
            !${{ env.R_LIBS_USER }}/pak
          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-${{ hashFiles('.github/r-depends.rds') }}
          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Install dependencies
        run: |
          cat("::group::Install dependencies\n")
          on_linux <- Sys.info()[["sysname"]] == "Linux"
          options(
            pak.no_extra_messages = TRUE,
            repos = c(
              carpentries = "https://carpentries.r-universe.dev/",
              archive     = "https://carpentries.github.io/drat/",
              CRAN        = "https://cran.rstudio.com"
            )
          )
          if (on_linux) {
            options(repos = c(RSPM = Sys.getenv("RSPM"), getOption("repos")))
          }
          library("remotes")
          pkgs <- package_deps('sandpaper', dependencies = TRUE)
          pkgs$diff[pkgs$package == "tinkr"] <- -1
          update(pkgs, upgrade = "always")
          cat("::endgroup::\n")
          varnish_version <- '${{ inputs.varnish-version }}'
          cfg <- readLines("config.yaml")
          get_version <- function(x, key = "varnish") {
            res <- x[grepl(paste0("^", key, "\\s?:"), x)]
            if (length(res)) {
              res <- trimws(strsplit(res, ":")[[1]][2])
              if (grepl("^[0-9]", res)) {
                res <- paste0("carpentries/", key, "@", res)
              }
            } else {
              res <- "latest"
            }
            res
          }
          varnish_version <- get_version(cfg, key = "varnish")
          sandpaper_version <- get_version(cfg, key = "sandpaper")
          if (varnish_version != "latest") {
            cat("::group::Installing", varnish_version, "\n")
            install_github(varnish_version)
            cat("::endgroup::\n")
          }
          sandpaper_version <- '${{ inputs.sandpaper-version }}'
          if (sandpaper_version != "latest") {
            cat("::group::Installing", sandpaper_version, "\n")
            install_github(sandpaper_version)
            cat("::endgroup::\n")
          }
        shell: Rscript {0}

      - name: Session info
        run: |
          cat("::group::Session info\n")
          sandpaper:::ci_session_info()
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Don't use tar 1.30 from Rtools35 to store the cache
        shell: bash
        run: |
          if command -v /c/Rtools/bin/tar && /c/Rtools/bin/tar --version | grep -q 'tar (GNU tar) 1.30'
            then echo 'C:/Program Files/Git/usr/bin' >> $GITHUB_PATH
          fi
