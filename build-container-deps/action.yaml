name: 'build-container-deps'
description: 'Action to set up all container dependencies for a lesson'
author: 'Robert P. Davey'
inputs:
  WORKBENCH_TAG:
    description: 'Override Workbench version tag, e.g. "v0.15.0" or "latest". Defaults to "latest".'
    required: false
    default: 'latest'
  LESSON_PATH:
    description: 'Path to the lesson directory within the container. Defaults to "/home/rstudio/lesson".'
    default: '/home/rstudio/lesson'

runs:
  using: "composite"
  steps:
    - name: Setup Lesson Dependencies
      run: |
        Rscript /home/rstudio/.workbench/setup_lesson_deps.R
      shell: bash

    - name: Get Container Version Used
      id: wb-vers
      uses: carpentries/actions/container-version@main
      with:
        WORKBENCH_TAG: ${{ inputs.WORKBENCH_TAG }}

    - name: Restore renv from cache
      id: restore-renv-cache
      uses: actions/cache@v4
      if: env.RENV_EXISTS == 'true'
      with:
        path: ${{ inputs.LESSON_PATH }}/renv
        key: ${{ steps.wb-vers.outputs.container-version }}-${{ inputs.cache-version }}-renv-${{ env.RENV_HASH }}
        restore-keys:
          ${{ steps.wb-vers.outputs.container-version }}-${{ inputs.cache-version }}-renv-

    - name: Fail on renv cache miss
      if: env.RENV_EXISTS == 'true' && steps.restore-renv-cache.outputs.cache-hit != 'true'
      run: |
        echo "‚ùå renv cache required but none available. Please run the "02 Maintain: Check for Updated Packages" then the "03 Maintain: Apply Package Cache" workflows."
        exit 1
      shell: bash

    - name: Restore renv Dependencies
      if: env.RENV_EXISTS == 'true' && steps.restore-renv-cache.outputs.cache-hit == 'true'
      run: |
        lsn_path <- fs::path("${{ inputs.LESSON_PATH }}")
        renv::load(project = lsn_path)
        renv_lib  <- renv::paths$library(project = lsn_path)
        renv_lock <- renv::paths$lockfile(project = lsn_path)
        renv::restore(project = lsn_path, library = renv_lib, lockfile = renv_lock, prompt = FALSE)
      shell: Rscript {0}

    - name: Override any Workbench packages
      if: env.VARNISH_VER != 'latest' || env.SANDPAPER_VER != 'latest' || env.PEGBOARD_VER != 'latest'
      run: |
        varnish_version   <- '${{ env.VARNISH_VER }}'
        sandpaper_version <- '${{ env.SANDPAPER_VER }}'
        pegboard_version  <- '${{ env.PEGBOARD_VER }}'

        cfg_file <- '${{ inputs.LESSON_PATH }}/config.yaml'

        library("remotes")
        cfg <- if (file.exists(cfg_file)) readLines(cfg_file) else character(0)
        get_version <- function(x, key = "varnish") {
          res <- x[grepl(paste0("^", key, "\\s?:"), x)]
          if (length(res)) {
            res <- trimws(strsplit(res, ":")[[1]][2])
            # trim quotes
            res <- gsub("[\"']", "", res)
            if (grepl("^[0-9]", res)) {
              res <- paste0("carpentries/", key, "@", res)
            }
          } else {
            res <- "latest"
          }
          res
        }

        varnish_version <- get_version(cfg, key = "varnish")
        sandpaper_version <- get_version(cfg, key = "sandpaper")
        pegboard_version <- get_version(cfg, key = "pegboard")
        if (varnish_version != "latest") {
          cat("::group::Installing", varnish_version, "\n")
          remotes::install_github(varnish_version)
          cat("::endgroup::\n")
        }
        if (sandpaper_version != "latest") {
          cat("::group::Installing", sandpaper_version, "\n")
          remotes::install_github(sandpaper_version)
          cat("::endgroup::\n")
        }
        if (pegboard_version != "latest") {
          cat("::group::Installing", pegboard_version, "\n")
          remotes::install_github(pegboard_version)
          cat("::endgroup::\n")
        }
      shell: Rscript {0}
