name: 'update-lockfile'
description: 'Action to update package dependencies for Carpentries Lessons'
author: 'Zhian N. Kamvar'
inputs:
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache'
    required: true
    default: 1
  update:
    description: 'flag to update already installed packages'
    default: true
  repos:
    description: 'default repositories to set as an R expression (defaults to Carpentries repositories)'
    default: |
      c(
        carpentries = 'https://carpentries.r-universe.dev/',
        carpentries_archive = 'https://carpentries.github.io/drat/',
        CRAN = 'https://cran.rstudio.com'
      )
  profile:
    description: 'the {renv} profile to update (defaults to lesson-requirements)'
    default: 'lesson-requirements'
outputs:
  n:
    description: the number of packages to be updated
    value: ${{ steps.update.outputs.n }}
  date:
    description: the date (used for branch name)
    value: ${{ steps.update.outputs.date }}
  report:
    description: the report of packages to be updated in the lesson
    value: ${{ steps.update.outputs.report }}
runs:
  using: "composite"
  steps:
      - name: "Restore {renv} Cache"
        uses: actions/cache@v4
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-${{ inputs.cache-version }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys:
            ${{ runner.os }}-${{ inputs.cache-version }}-renv-

      - name: "Check for and/or update renv/sandbox ignore"
        shell: bash
        run: |
          if [ $(grep 'renv/sandbox' .gitignore) ]; then
            :
          else
            printf 'renv/sandbox\n' >> .gitignore
          fi

      - name: "Setup System Dependencies"
        shell: Rscript {0}
        run: |
          req <- function(pkg) {
            if (!requireNamespace(pkg, quietly = TRUE)) 
            install.packages(pkg, repos = c("https://carpentries.r-universe.dev", "https://cran.rstudio.com"))
          }
          wd <- '${{ github.workspace }}'
          has_lock <- file.exists(file.path(wd, 'renv'))
          if (Sys.info()[["sysname"]] == "Linux" && has_lock) {
            req("renv")
            req("remotes")
            rmts <- asNamespace("remotes")
            # extract the function 
            sov <- rmts$supported_os_versions 
            # if 22.04 is not present, we need to modify the function
            if (!grepl("22.04", body(sov)[2])) {
              unlockBinding("supported_os_versions", rmts)
              # modify the list in the body to include 22.04
              vers <- eval(parse(text = as.character(body(sov)[2])))
              vers$ubuntu <- c(vers$ubuntu, "22.04")
              # replace the body
              body(sov)[2] <- list(str2lang(paste(capture.output(dput(vers)), collapse = "")))
              # replace the function in the namespace
              rmts$supported_os_versions <- sov
            }
            req("desc")
            remotes::install_github("carpentries/vise")
            Sys.setenv("RENV_PROFILE" = "lesson-requirements")
            Sys.setenv("RSPM_ROOT" = "https://packagemanager.posit.co")
            vise::ci_sysreqs(renv::paths$lockfile(), execute = TRUE)
          }

      - name: "Update {renv} deps and determine if a PR is needed"
        id: update
        shell: Rscript {0}
        run: |
          # Verify inputs ------------------------------------------------------
          cat("::group::Verifying inputs and setting repositories\n")
          library(vise)
          vise::verify_simple_vector(${{ inputs.repos }})
          options(repos = ${{ inputs.repos }})
          cat("done")
          cat("::endgroup::\n")
          # Update the packages as needed --------------------------------------
          cat("::group::Restoring package library\n")
          # load packages needed for ci_sysreqs
          library(desc)
          library(remotes)
          rmts <- asNamespace("remotes")
          # extract the function 
          sov <- rmts$supported_os_versions 
          Sys.setenv("RSPM_ROOT" = "https://packagemanager.posit.co")
          # if 22.04 is not present, we need to modify the function
          if (!grepl("22.04", body(sov)[2])) {
            unlockBinding("supported_os_versions", rmts)
            # modify the list in the body to include 22.04
            vers <- eval(parse(text = as.character(body(sov)[2])))
            vers$ubuntu <- c(vers$ubuntu, "22.04")
            # replace the body
            body(sov)[2] <- list(str2lang(paste(capture.output(dput(vers)), collapse = "")))
            # replace the function in the namespace
            rmts$supported_os_versions <- sov
          }
          vise:::ci_update(profile = "${{ inputs.profile }}",
            update = "${{ inputs.update }}",
            repos = "${{ inputs.repos }}")
          cat("::endgroup::\n")

      - name: "Upload renv folder as artifact (extract as renv/)"
        uses: actions/upload-artifact@v4
        with:
          name: renv
          path: |
            ${{ github.workspace }}/renv/
            !${{ github.workspace }}/renv/profiles/${{ inputs.profile }}/renv/library
            !${{ github.workspace }}/renv/profiles/${{ inputs.profile }}/renv/staging


          retention-days: 30

      - name: Don't use tar 1.30 from Rtools35 to store the cache
        shell: bash
        run: |
          if command -v /c/Rtools/bin/tar && /c/Rtools/bin/tar --version | grep -q 'tar (GNU tar) 1.30'
            then echo 'C:/Program Files/Git/usr/bin' >> $GITHUB_PATH
          fi
